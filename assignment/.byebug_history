exit
session[:session_id]
exit
session[:session_id]
exit
session[:session_id]
exit
session[:session_id]
exit
session[:session_id]
session.keys
exit
step
@registry
@registery
step
event_stack
step
@end
step
@end
@name
@payload
@transaction_id
@transaction
step
value
step
sql
step
cache_sql
step
sql
step
ast
arel
step
ast
step
sql
to_sql(arel,binds)
binds
arel
step
condition
step
BLANK_RE.class
BLANK_RE
self
condition
step
@table_name
step
value
step
back
sql
klass
step
sql
step
Base.connection_id
Thread.current.class
Thread.current.object_id
step
pool
step
cookies
@class_to_pool.class
@class_to_pool
Process.pid
step
klass
step
instance
step
connection_id.class
connection_handler
sql_runtime
connection_id
connecction_id
val
step
id
id.class
step
id.class
id
step
id
ActiveRecord::Base
ids
step
columns
columns_hash
step
instance
step
primary_key
step
converted
step
@_params
params
converted
step
converted
Parameters
step
converted
step
params
step
params[:id]
params
step
@_params.class
@_params
request.parameters.class
request.parameters
step
help
where
help
@curr_company
@company
var all
var
exit
::Digest::SHA256.hexdigest(Base64.strict_decode64(session[:_csrf_token]))
::Digest::SHA256.hexdigest(Base64.strict_decode64(params[:authenticity_token]))
ActiveSupport::Digest::SHA256.hexdigest(Base64.strict_decode64(params[:authenticity_token]))
ActiveSupport::::Digest::SHA256.hexdigest(Base64.strict_decode64(params[:authenticity_token]))
ActiveSupport::SecurityUtils.secure_compare(Base64.strict_decode64(params[:authenticity_token]),Base64.strict_decode64(session[:_csrf_token]))
Base64.strict_decode64(session[:_csrf_token])
 Base64.strict_decode64(params[:authenticity_token])
b = Base64.strict_decode64(session[:_csrf_token]) 
a = Base64.strict_decode64(params[:authenticity_token])
Base64.strict_decode64(params[:authenticity_token])
params[:authenticity_token]
params
session[:session_id]
session.keys
exit
session.keys
exit
[form_authenticity_param, request.x_csrf_token]
session.keys
session.each{|k,v| p "#{k}=>#{v}"}
ActiveSupport::SecurityUtils.secure_compare(Base64.strict_decode64(params[:authenticity_token]),Base64.strict_decode64(session[:_csrf_token]))
params[:authenticity_token]
Base64.strict_decode64(session[:_csrf_token])
session[:_csrf_token]
Base64.strict_decode64("4UUUwZcLaKRKTy5E25+XmB40UIYBsv8fUi3GlGm8VUBkGWcVqPvWf9lK68314fSIsEgZb9KXlM2/jxMT/+v5iA==")
session[:session_id]
params
session.keys
exit
cookies.class
session.class
ActiveSupport::SecurityUtils.secure_compare(Base64.strict_decode64("4UUUwZcLaKRKTy5E25+XmB40UIYBsv8fUi3GlGm8VUBkGWcVqPvWf9lK68314fSIsEgZb9KXlM2/jxMT/+v5iA=="), real_csrf_token(session))
Base64.strict_decode64("4UUUwZcLaKRKTy5E25+XmB40UIYBsv8fUi3GlGm8VUBkGWcVqPvWf9lK68314fSIsEgZb9KXlM2/jxMT/+v5iA==")
AUTHENTICITY_TOKEN_LENGTH
request_authenticity_tokens.any?
request.authenticity_tokens.any?
request.authenticity_tokens
real_csrf_token(session)
[form_authenticity_param, request.x_csrf_token]
Base64.strict_decode64(session[:_csrf_token])
session[:_csrf_token]
params
session[:_csrf_token]
session.inspect
cookies
exit
request
exit
request.env['PATH_INFO']
request.env['method']
request.env['HTTP_REFERER']
request
exit
quit
request.SECRET_KEY_BASE
request.query_string
exit
request.query_string
exit
request.x_csrf_token
request_authenticity_tokens?
request_authenticity_tokens
Base64.strict_decode64(encoded_masked_token)
encoded_masked_token = session.values[1]
Base64.strict_decode64(encoded_masked_token)
request.token
session.values
session.keys
session.methods.sort
session
        end
          false
        else
          ActiveSupport::SecurityUtils.secure_compare(token, correct_token)
          )
            request.request_method
            normalize_action_path(request.fullpath),
            session,
          correct_token = per_form_csrf_token(
if per_form_csrf_tokens
request.request_method
u.class
u.path.chomp("/")
u.path
u = URI.parse(request.fullpath)
URI.parse(request.fullpath)
URI.parse(action_path)
request.fullpath
request.full_path
protect_against_forgery?
request.origin
request.base_url
request.origin == request.base_url
 %r(\Atext/javascript) && !request.xhr?
request.post?
request.class.methods.sort
.
request.class.methods.sort
request.class.methods
request.class
request.xhr?
request.get
request.get?
